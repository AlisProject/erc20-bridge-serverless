# Service name
service: erc20-bridge-serverless

# Serverless framework version
frameworkVersion: "=1.37.1"

# Provider
provider:
  name: aws
  runtime: python3.7

  stage: ${env:ALIS_APP_ID}
  region: ${env:AWS_DEFAULT_REGION}

  # Additional statements of the Lambda's IAM Role
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - kms:ListKeys
        - kms:ListAliases
        - kms:DescribeKey
        - kms:ListKeyPolicies
        - kms:GetKeyPolicy
        - kms:GetKeyRotationStatus
        - iam:ListUsers
        - iam:ListRoles
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.stage}ERC20BridgeInfo"

  # Function common environment variables
  environment:
    STAGE: ${self:provider.stage}

    # Public chain
    PUBLIC_CHAIN_RPC_URL: ${file(./chain_config.yml):public.rpcUrl}
    PUBLIC_CHAIN_BRIDGE_CONTRACT_ADDRESS: ${file(./chain_config.yml):public.bridgeContractAddress}

    # Private chain
    PRIVATE_CHAIN_RPC_URL: ${file(./chain_config.yml):private.rpcUrl}
    PRIVATE_CHAIN_BRIDGE_CONTRACT_ADDRESS: ${file(./chain_config.yml):private.bridgeContractAddress}

  # VPC
  vpc:
    subnetIds:
      - ${env:VPC_SUBNET_ID}
    securityGroupIds:
      - ${env:VPC_SECURITY_GROUP_ID}

  # Package
  package:
    include:
      - src/operator.py


# Lambda functions
functions:
  bridgePublicToPrivate:
    handler: handler.bridge_public_to_private

    # Scheduling
    events:
      - schedule: rate(10 minutes)

    # Function specific environts
    environment:
      PRIVATE_CHAIN_GAS: ${file(./chain_config.yml):private.gas}
      PRIVATE_CHAIN_GAS_PRICE: ${file(./chain_config.yml):private.gasPrice}

  brigePrivateToPublic:
    handler: handler.bridge_private_to_public

    # Scheduling
    events:
      - schedule: rate(10 minutes)

    # Function specific environts
    environment:
      PUBLIC_CHAIN_GAS: ${file(./chain_config.yml):public.gas}
      PUBLIC_CHAIN_GAS_PRICE: ${file(./chain_config.yml):public.gasPrice}

  applyRelayPrivate:
    handler: handler.apply_relay_private

    # Function specific environts
    environment:
      PRIVATE_CHAIN_GAS: ${file(./chain_config.yml):private.gas}
      PRIVATE_CHAIN_GAS_PRICE: ${file(./chain_config.yml):private.gasPrice}

  applyRelayPublic:
    handler: handler.apply_relay_public

    # Function specific environts
    environment:
      PUBLIC_CHAIN_GAS: ${file(./chain_config.yml):public.gas}
      PUBLIC_CHAIN_GAS_PRICE: ${file(./chain_config.yml):public.gasPrice}


# Plugins
plugins:
  - serverless-python-requirements
  - serverless-dynamodb-local


# Resources
resources:
  Resources:
    # DynamoDB
    erc20BridgeInfo:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}ERC20BridgeInfo
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


# Custom settings
custom:
  pythonRequirements:
    dockerizePip: true
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: false
